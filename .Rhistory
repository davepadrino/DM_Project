submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
submit()
library(swirl)
swirl()
paste(my_char, collapse = " ")
exit()
bye
swirl
swirl()
submit()
submit()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpos
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
unclass(Sys.Date())
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
d1
months(d1)
months(t1)
quarters(t2)
t3 <- 17 de octubre de 1986 08:24"
t3: 17 de octubre de 1986 08:24"
t3 <- c(17 de octubre de 1986 08:24")
t3 <- c("17 de octubre de 1986 08:24")
t3 <- "17 de octubre de 1986 08:24"
?strptime
t4<-strptime(t3, "%d de %B de %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
class(cars)
plot(cars)
?plto
?plot
plot(x =cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main())
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", secondary ="My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
plot(cars, type="l")
mtcars
data(mtcars)
dim(mtcars)
head(mtcars)
?boxplot
boxpl()
boxplot(formula = mpg ~ cyl, data = mtcars)
hits(mtcars$mpg)
hist(mtcars$mpg)
?barplot
barplot(marital)
barplot(mtcars$mpg)
barplot(marital)
barplot(cars)
barplot(martial)
barplot(mtcars)
play()
nxt()
package(swirl)
library(swirl)
swirl()
a
a
a
a
a
a
a123121
bye()
swirl()
submit
submit()
swirl()
library(Getting_and_Cleaning_Data)
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
swirl()
swirl()
swirl()
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
install_course_github('https://github.com/swirldev/swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
install_from_swirl("Getting_and_Cleaning_Data")
install_course_github("swirl_courses", "Getting_and_Cleaning_Data")
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE)
swirl()
swirl()
library(swirl)
install_course_github(davepadrino, Getting_and_Cleaning_Data)
install_course_github("davepadrino", Getting_and_Cleaning_Data)
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_zip(/home/dave/Downloads)
install_course_zip("/home/dave/Downloads", "Getting_and_Cleaning_Data")
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
swirl()
exit()
bye()
exit()
swilr()
swirl()
swirl()
library(swirl)
swirl()
s
sd
library("openNLP")
acq <- "Gulf Applied Technologies Inc said it sold its subsidiaries engaged in pipeline and terminal operations for 12.2 mln dlrs. The company said the sale is subject to certain post closing adjustments, which it did not explain. Reuter."
acqTag <- tagPOS(acq)
sapply(strsplit(acqTag,"[[:punct:]]*/VB.?"),function(x) sub("(^.*\\s)(\\w+$)", "\\2", x))
grep("ht(tp(s)*)*", ["HTTPS://", "https://"], ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", ("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "ht), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*|(tco)*", c("HTTPS://", "https://", "tco.."), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*(://)+)+|(tco)*", c("HTTPS://dasdasdasdas", "https://asdasdasd", "tco.."), ignore.case = TRUE, value = TRUE)
install.packages('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('rpart.plot')
library('rpart.plot')
install.packages('caret')
library('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('caret')
library('caret')
library('rpart')
install.packages('ggplot2')
install.packages('pROC')
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
# Install dependencies in Linux
# sudo apt-get install libcurl4-openssl-dev
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
get_url = function(origins, destinations, key, mode = "driving", language = "es"){
# install(pkg)
# url base for distance matrix api
base = "https://maps.googleapis.com/maps/api/distancematrix/json?"
# This could change, using only some atributes from API
origin = fetch_data("origins=", origins)
destination = fetch_data("destinations=", destinations)
key = fetch_data("key=", key)
mode = fetch_data("mode=", mode)
language = fetch_data("language=", language)
# Getting final format for Google API
api_url = paste(c(base, paste0(c(origin, destination, key, mode, language), collapse = "&")), collapse = "")
return(api_url)
}
get_data = function(api_url){
return(fromJSON(api_url))
}
# To Complete
parse_data = function(json){
}
?confusion.matrix
?confusionMatrix
setwd("./data")
sample_sub <- read.csv("sample_submission.csv")
train <- read.csv("training_ratings_for_kaggle_comp.csv")
movies <- readLines("movies.dat")
usr <- readLines("users.dat")
library("stringr")
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
# MovieID::Title::Genres
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
# create feature year from the title
year <- gsub("\\D", "", df.movie$title)
year <- str_sub(year, start = -4)
df.movie$year <- year
# delete the (year) from tittle (optional)
#df.movie$title <- str_sub(df.movie$title, start = 0 , end = -7)
df.movie$generos <-  mov[seq(from = 3, to = length(mov), by =3 )]
df.movie$action <- rep(0,length(df.movie$id))
df.movie$adventure <- rep(0,length(df.movie$id))
df.movie$animation <- rep(0,length(df.movie$id))
df.movie$children <- rep(0,length(df.movie$id))
df.movie$comedy <- rep(0,length(df.movie$id))
df.movie$crime <- rep(0,length(df.movie$id))
df.movie$documentary <- rep(0,length(df.movie$id))
df.movie$drama <- rep(0,length(df.movie$id))
df.movie$fantasy <- rep(0,length(df.movie$id))
df.movie$film_noir <- rep(0,length(df.movie$id))
df.movie$horror <- rep(0,length(df.movie$id))
df.movie$musical <- rep(0,length(df.movie$id))
df.movie$mystery <- rep(0,length(df.movie$id))
df.movie$romance <- rep(0,length(df.movie$id))
df.movie$sci_fi <- rep(0,length(df.movie$id))
df.movie$thriller <- rep(0,length(df.movie$id))
df.movie$war <- rep(0,length(df.movie$id))
df.movie$western <- rep(0,length(df.movie$id))
# Management of the genres
## Action
df.movie$action[grepl("(Action)", df.movie$generos)] =  as.character(1)
## Adventure
df.movie$adventure[grepl("(Adventure)", df.movie$generos)] =  as.character(1)
## Animation
df.movie$animation[grepl("(Animation)", df.movie$generos)] =  as.character(1)
## Children
df.movie$children[grepl("(Children's)", df.movie$generos)] =  as.character(1)
## Comedy
df.movie$comedy[grepl("(Comedy)", df.movie$generos)] =  as.character(1)
## Crime
df.movie$crime[grepl("(Crime)", df.movie$generos)] =  as.character(1)
## Documentary
df.movie$documentary[grepl("(Documentary)", df.movie$generos)] =  as.character(1)
## Drama
df.movie$drama[grepl("(Drama)", df.movie$generos)] =  as.character(1)
## Fantasy
df.movie$fantasy[grepl("(Fantasy)", df.movie$generos)] =  as.character(1)
## Film-noir
df.movie$film_noir[grepl("(Film-Noir)", df.movie$generos)] =  as.character(1)
## Horror
df.movie$horror[grepl("(Horror)", df.movie$generos)] =  as.character(1)
## Musical
df.movie$musical[grepl("(Musical)", df.movie$generos)] =  as.character(1)
## Mystery
df.movie$mystery[grepl("(Mystery)", df.movie$generos)] =  as.character(1)
## Romance
df.movie$romance[grepl("(Romance)", df.movie$generos)] =  as.character(1)
## Sci-fi
df.movie$sci_fi[grepl("(Sci-Fi)", df.movie$generos)] =  as.character(1)
## Thriller
df.movie$thriller[grepl("(Thriller)", df.movie$generos)] =  as.character(1)
## War
df.movie$war[grepl("(War)", df.movie$generos)] =  as.character(1)
## Western
df.movie$western[grepl("(Western)", df.movie$generos)] =  as.character(1)
setwd("./data")
setwd(". /data")
setwd("/data")
ls()
ls()
getwd()
setwd("~/Desktop/univ/Minería de Datos/Proyecto")
parent.frame(2)
parent.frame(2)$ofile
sys.frame(1)
dirname(sys.frame(1)$ofile)
dirname(parent.frame(2)$ofile)
print(getwd())
get("ofile",envir = parent.frame())
get("proyecto.R",envir = parent.frame())
setwd("/data")
sample_sub <- read.csv("data/sample_submission.csv")
500109/9
500109/3
sample_sub
View(sample_sub)
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
library("stringr")
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
?unlist
col(df.user)
colnames(df.user)
names(df.user)
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
class(mov)
df.movie[73]
df.movie$title[73]
df.movie$title
df.movie$id
df.movie$id[73]
df.movie$id
View(df.movie)
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
movies <- readLines("data/movies.dat")
movies
mov <- unlist(strsplit(movies,"::"))
movies[73]
Sys.getlocale()
Sys.setlocale('LC_ALL','C')
Sys.getlocale()
Sys.setlocale("LC_ALL","English")
Sys.setlocale('LC_ALL',''en_GB.UTF-8'')
Sys.setlocale('LC_ALL','en_GB.UTF-8')
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
movies[73]
Sys.setlocale(locale="C")
library("stringr")
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
movies[73]
View(df.movie)
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
# MovieID::Title::Genres
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
year <- gsub("\\D", "", df.movie$title)
year <- str_sub(year, start = -4)
df.movie$year <- year
View(df.movie)
df.movie$generos <-  mov[seq(from = 3, to = length(mov), by =3 )]
df.movie$action <- rep(0,length(df.movie$id))
df.movie$adventure <- rep(0,length(df.movie$id))
df.movie$animation <- rep(0,length(df.movie$id))
df.movie$children <- rep(0,length(df.movie$id))
df.movie$comedy <- rep(0,length(df.movie$id))
df.movie$crime <- rep(0,length(df.movie$id))
df.movie$documentary <- rep(0,length(df.movie$id))
df.movie$drama <- rep(0,length(df.movie$id))
df.movie$fantasy <- rep(0,length(df.movie$id))
df.movie$film_noir <- rep(0,length(df.movie$id))
df.movie$horror <- rep(0,length(df.movie$id))
df.movie$musical <- rep(0,length(df.movie$id))
df.movie$mystery <- rep(0,length(df.movie$id))
df.movie$romance <- rep(0,length(df.movie$id))
df.movie$sci_fi <- rep(0,length(df.movie$id))
df.movie$thriller <- rep(0,length(df.movie$id))
df.movie$war <- rep(0,length(df.movie$id))
df.movie$western <- rep(0,length(df.movie$id))
View(df.movie)
# Management of the genres
## Action
df.movie$action[grepl("(Action)", df.movie$generos)] =  as.character(1)
## Adventure
df.movie$adventure[grepl("(Adventure)", df.movie$generos)] =  as.character(1)
## Animation
df.movie$animation[grepl("(Animation)", df.movie$generos)] =  as.character(1)
## Children
df.movie$children[grepl("(Children's)", df.movie$generos)] =  as.character(1)
## Comedy
df.movie$comedy[grepl("(Comedy)", df.movie$generos)] =  as.character(1)
## Crime
df.movie$crime[grepl("(Crime)", df.movie$generos)] =  as.character(1)
## Documentary
df.movie$documentary[grepl("(Documentary)", df.movie$generos)] =  as.character(1)
## Drama
df.movie$drama[grepl("(Drama)", df.movie$generos)] =  as.character(1)
## Fantasy
df.movie$fantasy[grepl("(Fantasy)", df.movie$generos)] =  as.character(1)
## Film-noir
df.movie$film_noir[grepl("(Film-Noir)", df.movie$generos)] =  as.character(1)
## Horror
df.movie$horror[grepl("(Horror)", df.movie$generos)] =  as.character(1)
## Musical
df.movie$musical[grepl("(Musical)", df.movie$generos)] =  as.character(1)
## Mystery
df.movie$mystery[grepl("(Mystery)", df.movie$generos)] =  as.character(1)
## Romance
df.movie$romance[grepl("(Romance)", df.movie$generos)] =  as.character(1)
## Sci-fi
df.movie$sci_fi[grepl("(Sci-Fi)", df.movie$generos)] =  as.character(1)
## Thriller
df.movie$thriller[grepl("(Thriller)", df.movie$generos)] =  as.character(1)
## War
df.movie$war[grepl("(War)", df.movie$generos)] =  as.character(1)
## Western
df.movie$western[grepl("(Western)", df.movie$generos)] =  as.character(1)
iris
ir <- data.frame(iris)
scale(ir)
ir[5]
ir[4]
ir[5]
scale(ir[-5])
names(train[4])
scale(train[-4])
plot(scale(train[-4]))
plot(scale(train[-4]))
plot(train[-4])
