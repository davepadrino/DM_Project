vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?mattrix
?matrix
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames()<- cnames
colnames(cnames)
colnames(my_data) <-
cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5
!=7
5!=7
!(5==7)
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
boring_function(x)
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
submit()
library(swirl)
swirl()
paste(my_char, collapse = " ")
exit()
bye
swirl
swirl()
submit()
submit()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpos
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
unclass(Sys.Date())
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
d1
months(d1)
months(t1)
quarters(t2)
t3 <- 17 de octubre de 1986 08:24"
t3: 17 de octubre de 1986 08:24"
t3 <- c(17 de octubre de 1986 08:24")
t3 <- c("17 de octubre de 1986 08:24")
t3 <- "17 de octubre de 1986 08:24"
?strptime
t4<-strptime(t3, "%d de %B de %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
class(cars)
plot(cars)
?plto
?plot
plot(x =cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main())
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", secondary ="My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
plot(cars, type="l")
mtcars
data(mtcars)
dim(mtcars)
head(mtcars)
?boxplot
boxpl()
boxplot(formula = mpg ~ cyl, data = mtcars)
hits(mtcars$mpg)
hist(mtcars$mpg)
?barplot
barplot(marital)
barplot(mtcars$mpg)
barplot(marital)
barplot(cars)
barplot(martial)
barplot(mtcars)
play()
nxt()
package(swirl)
library(swirl)
swirl()
a
a
a
a
a
a
a123121
bye()
swirl()
submit
submit()
swirl()
library(Getting_and_Cleaning_Data)
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
swirl()
swirl()
swirl()
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
install_course_github('https://github.com/swirldev/swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
install_from_swirl("Getting_and_Cleaning_Data")
install_course_github("swirl_courses", "Getting_and_Cleaning_Data")
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE)
swirl()
swirl()
library(swirl)
install_course_github(davepadrino, Getting_and_Cleaning_Data)
install_course_github("davepadrino", Getting_and_Cleaning_Data)
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_zip(/home/dave/Downloads)
install_course_zip("/home/dave/Downloads", "Getting_and_Cleaning_Data")
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
swirl()
exit()
bye()
exit()
swilr()
swirl()
swirl()
library(swirl)
swirl()
s
sd
library("openNLP")
acq <- "Gulf Applied Technologies Inc said it sold its subsidiaries engaged in pipeline and terminal operations for 12.2 mln dlrs. The company said the sale is subject to certain post closing adjustments, which it did not explain. Reuter."
acqTag <- tagPOS(acq)
sapply(strsplit(acqTag,"[[:punct:]]*/VB.?"),function(x) sub("(^.*\\s)(\\w+$)", "\\2", x))
grep("ht(tp(s)*)*", ["HTTPS://", "https://"], ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", ("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "ht), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*|(tco)*", c("HTTPS://", "https://", "tco.."), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*(://)+)+|(tco)*", c("HTTPS://dasdasdasdas", "https://asdasdasd", "tco.."), ignore.case = TRUE, value = TRUE)
install.packages('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('rpart.plot')
library('rpart.plot')
install.packages('caret')
library('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('caret')
library('caret')
library('rpart')
install.packages('ggplot2')
install.packages('pROC')
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
# Install dependencies in Linux
# sudo apt-get install libcurl4-openssl-dev
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
get_url = function(origins, destinations, key, mode = "driving", language = "es"){
# install(pkg)
# url base for distance matrix api
base = "https://maps.googleapis.com/maps/api/distancematrix/json?"
# This could change, using only some atributes from API
origin = fetch_data("origins=", origins)
destination = fetch_data("destinations=", destinations)
key = fetch_data("key=", key)
mode = fetch_data("mode=", mode)
language = fetch_data("language=", language)
# Getting final format for Google API
api_url = paste(c(base, paste0(c(origin, destination, key, mode, language), collapse = "&")), collapse = "")
return(api_url)
}
get_data = function(api_url){
return(fromJSON(api_url))
}
# To Complete
parse_data = function(json){
}
?confusion.matrix
?confusionMatrix
setwd("~/Desktop/univ/Minería de Datos/Proyecto")
Sys.setlocale(locale="C")
library("stringr")
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
year <- gsub("\\D", "", df.movie$title)
year <- str_sub(year, start = -4)
df.movie$year <- year
df.movie$generos <-  mov[seq(from = 3, to = length(mov), by =3 )]
df.movie$action <- rep(0,length(df.movie$id))
df.movie$adventure <- rep(0,length(df.movie$id))
df.movie$animation <- rep(0,length(df.movie$id))
df.movie$children <- rep(0,length(df.movie$id))
df.movie$comedy <- rep(0,length(df.movie$id))
df.movie$crime <- rep(0,length(df.movie$id))
df.movie$documentary <- rep(0,length(df.movie$id))
df.movie$drama <- rep(0,length(df.movie$id))
df.movie$fantasy <- rep(0,length(df.movie$id))
df.movie$film_noir <- rep(0,length(df.movie$id))
df.movie$horror <- rep(0,length(df.movie$id))
df.movie$musical <- rep(0,length(df.movie$id))
df.movie$mystery <- rep(0,length(df.movie$id))
df.movie$romance <- rep(0,length(df.movie$id))
df.movie$sci_fi <- rep(0,length(df.movie$id))
df.movie$thriller <- rep(0,length(df.movie$id))
df.movie$war <- rep(0,length(df.movie$id))
df.movie$western <- rep(0,length(df.movie$id))
df.movie$action[grepl("(Action)", df.movie$generos)] =  as.character(1)
## Adventure
df.movie$adventure[grepl("(Adventure)", df.movie$generos)] =  as.character(1)
## Animation
df.movie$animation[grepl("(Animation)", df.movie$generos)] =  as.character(1)
## Children
df.movie$children[grepl("(Children's)", df.movie$generos)] =  as.character(1)
## Comedy
df.movie$comedy[grepl("(Comedy)", df.movie$generos)] =  as.character(1)
## Crime
df.movie$crime[grepl("(Crime)", df.movie$generos)] =  as.character(1)
## Documentary
df.movie$documentary[grepl("(Documentary)", df.movie$generos)] =  as.character(1)
## Drama
df.movie$drama[grepl("(Drama)", df.movie$generos)] =  as.character(1)
## Fantasy
df.movie$fantasy[grepl("(Fantasy)", df.movie$generos)] =  as.character(1)
## Film-noir
df.movie$film_noir[grepl("(Film-Noir)", df.movie$generos)] =  as.character(1)
## Horror
df.movie$horror[grepl("(Horror)", df.movie$generos)] =  as.character(1)
## Musical
df.movie$musical[grepl("(Musical)", df.movie$generos)] =  as.character(1)
## Mystery
df.movie$mystery[grepl("(Mystery)", df.movie$generos)] =  as.character(1)
## Romance
df.movie$romance[grepl("(Romance)", df.movie$generos)] =  as.character(1)
## Sci-fi
df.movie$sci_fi[grepl("(Sci-Fi)", df.movie$generos)] =  as.character(1)
## Thriller
df.movie$thriller[grepl("(Thriller)", df.movie$generos)] =  as.character(1)
## War
df.movie$war[grepl("(War)", df.movie$generos)] =  as.character(1)
## Western
df.movie$western[grepl("(Western)", df.movie$generos)] =  as.character(1)
names(train)
head(train)
train{4}
train[4]
names(train[4])
head(train)
head(train[4])
train[-4] <- train.new
train.new <- train[-4]
?unique
unique(train.new$movie)
head(df.movie)
class(df.movie)
names(df.movie)
head(df.movie$id)
train.new$movie == 1
train.new[train.new$movie == 1]
train.new[train.new$movie == 1, ]
head(train.new[train.new$movie == 1, ])
last(train.new$movie)
tail(train.new$movie)
head(train.new[train.new$movie == 6040, ])
head(train.new[train.new$movie == 3952, ])
unique(df.movie$id)
duplicated(df.movie$id)
df.train <- data.frame()
nrow(df.movie)
head(df.movie[1])
colnames(df.train) <- df.movie$id
?data.frame
df.train <- data.frame(matrix(ncol = nrow(df.movie), nrow = nrow(df.user)))
head(df.train)
head(df.train)
colnames(df.train) <- df.movie$id
head(df.train)
summary(df.train)
head(train.new[train.new$movie == 91, ])
ddf.train[91]
df.train[91]
df.train <- data.frame(matrix(ncol = df.movie$id, nrow = nrow(df.user)))
head(df.movie$id)
class(df.movie$id)
head(as.numeric(df.movie$id))
df.train <- data.frame(matrix(ncol = as.numeric(df.movie$id), nrow = nrow(df.user)))
df.train[91]
head(df.train[90])
dim(df.train)
df.train <- data.frame(matrix(ncol = nrow(df.movie$id), nrow = nrow(df.user)))
df.train <- data.frame(matrix(ncol = nrow(df.movie), nrow = nrow(df.user)))
colnames(df.train) <- df.movie$id
names(df.train[90])
names(df.train[91])
names(df.train[91]) == 92
train.new[1]
train.new[1,]
train.new[1,]$user
train.new[2,]$user
train.new[2,]
train.new[1,]
df.train["91"]
df.train["90"]
df.train["91"]
df.train["90"]
train.new[1,]$movie
train.new[1,]$movie
df.train[train.new[1,]$movie]
head(df.train[train.new[1,]$movie])
train.new[1,]$movie
head(df.train["train.new[1,]$movie]")
head(df.train["train.new[1,]$movie]")
class(train.new[1,]$movie)
x <- as.character(train.new[1,]$movie)
x
head(df.train[x])
train.new[1,]$user
train.new[1,1]
train.new[1,]
train.new[1,2]
train.new[1,3]
train.new[1,4]
df.row <- train.new[1,]$user
class(df.row)
df.colu <- as.character(train.new[1,]$movie)
class(df.colu)
df.train[df.row, df.colu] <- train.new[1,]$rating
df.train[1,1]
head(df.train[1])
df.train[2783,1252]
df.train[2783,1253]
df.train[2783,"1253"]
df.train[2783,"1254"]
df.train[2783,"1257"]
df.train <- data.frame(matrix(ncol = nrow(df.movie), nrow = nrow(df.user)))
colnames(df.train) <- df.movie$id
for (i in 1:nrow(train.new)){
df.row <- train.new[i,]$user
df.colu <- as.character(train.new[i,]$movie)
df.train[df.row, df.colu] <- train.new[i,]$rating
}
View(df.train)
write.csv(df.train, file = "sparse.csv")
class(train.new$rating)
diff(train.new$rating)
unique(train.new$rating)
