library("arules")
library("dplyr")
library("arulesViz")
periodico <- read.csv("periodico.csv")
ejemplo <- read.csv("ejemplo.csv")
setwd("C:/Users/Davee/Desktop/tarea4/recomendacion-modelos-master")
periodico <- read.csv("periodico.csv")
ejemplo <- read.csv("ejemplo.csv")
colnames(periodico)[5] <-  "items"
ejemplo$X <- NULL
periodico$X <- NULL
lengths(split[1:nrow(periodico)])
lengths(split[1:nrow(periodico)])
example.bots <- as.character()
time <- as.numeric()
for(i in 1:length(periodico$entry)){
calc <- as.numeric(difftime(periodico$exit[i], periodico$entry[i], unit="sec"))
time <- append(time,calc)
if (calc < 21){
example.bots <- append(example.bots, as.character(periodico$ID[i]))
}
}
nrow(periodico)
split[1:nrow(periodico)]
?apply
rm(example.bots)
calc <- as.numeric(difftime(periodico$exit, periodico$entry, unit="sec"))
find.bots <- function(periodico){
example.bots <- as.character()
time <- as.numeric()
calc <- as.numeric(difftime(periodico$exit, periodico$entry, unit="sec"))
time <- append(time,calc)
if (calc < 21){
example.bots <- append(example.bots, as.character(periodico$ID))
}
nodata <- as.data.frame(time, example.bots)
return(example.bots)
}
apply(periodico[,c('exit','entry')], 2, find.bots)
find.bots <- function(exit, entry){
example.bots <- as.character()
time <- as.numeric()
calc <- as.numeric(difftime(exit, entry, unit="sec"))
time <- append(time,calc)
if (calc < 21){
example.bots <- append(example.bots, as.character(periodico$ID))
}
df.result <- as.data.frame(time, example.bots)
return(df.result)
}
apply(periodico[,c('exit','entry')], 2, find.bots)
f<- as.data.frame()
f <- as.data.frame(periodico$exit, periodico$entry)
View(ejemplo)
View(ejemplo)
names(ejemplo[2])
names(ejemplo[2:3])
length(ejemplo$entry)
View(ejemplo)
names(ejemplo[1:3])
find.bots <- function(id, exit, entry){
example.bots <- as.character()
time <- as.numeric()
calc <- as.numeric(difftime(exit, entry, unit="sec"))
time <- append(time,calc)
if (calc < 21){
example.bots <- append(example.bots, as.character(id))
}
df.result <- as.data.frame(matrix(nrow = length(entry), ncol = 2))
return(df.result)
}
f <- lapply(ejemplo[1:3], find.bots)
ejemplo$times <- difftime(ejemplo$exit, ejemplo$entry, units =  "secs")
View(ejemplo)
bots = ejemplo$ID[(ejemplo$times < 21)]
bots
View(ejemplo)
bots = ejemplo$ID[(ejemplo$times < 80)]
bots
periodico <- read.csv("periodico.csv")
ejemplo <- read.csv("ejemplo.csv")
colnames(periodico)[5] <-  "items"
ejemplo$X <- NULL
periodico$X <- NULL
periodico$times <- difftime(periodico$exit, periodico$entry, units =  "secs")
View(periodico)
possible.bots = periodico$ID[(periodico$times < 21)]
periodico <- read.csv("periodico.csv")
ejemplo <- read.csv("ejemplo.csv")
colnames(periodico)[5] <-  "items"
ejemplo$X <- NULL
periodico$X <- NULL
periodico$times <- difftime(periodico$exit, periodico$entry, units =  "secs")
possible.bots = periodico$ID[(periodico$times < 21)]
contenido <- c("deportes","politica","variedades","internacional","nacionales","sucesos","comunidad","negocios","opinion")
unliststr <- function(vec){
it <- unlist(strsplit(vec, ","))
numbers <- unique(na.omit(as.numeric(unlist(strsplit(as.character(it), "[^0-9]+")))))
element <- character()
for (i in 1:length(numbers)){
if(floor(((numbers[i]/9) %% 1)*10)!=0){
group <- as.integer((numbers[i]/9)+1)
article <- floor(((numbers[i]/9) %% 1)*10)
article <- paste(c("articulo",article), collapse = "")
item <- paste(c(contenido[group],article), collapse = "/")
element <- paste(c(element,item), collapse = ",")
}else{
group <- as.integer(numbers[i]/9)
article <- paste(c("articulo",9), collapse = "")
item <- paste(c(contenido[group],article), collapse = "/")
element <- paste(c(element,item), collapse = ",")
}
}
return(element)
}
periodico$article <- sapply(as.character(periodico$items), unliststr)
View(periodico)
items <- as.character(periodico$article)
items.names <- unique(unlist(strsplit(items, split = ',')))
nodata <- as.data.frame(matrix(nrow = length(items), ncol = length(items.names)))
colnames(nodata) <- items.names
fill <-  function(item) {
aux <- unlist(strsplit(items, split = ','))
for (j in aux){
nodata[,j] <- T
}
}
fill <-  function(item) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
nodata[,j] <- T
}
}
nodata <- fill(items)
View(nodata)
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
View(nodata2)
nodata2 <- fill(items2)
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[,j] <- T
}
}
nodata2 <- fill(items2, nodata2)
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[,j] <- T
}
return(df)
}
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- fill(items2, nodata2)
View(nodata2)
names(ejemplo[,1])
names(ejemplo[,2])
names(ejemplo[1,])
names(ejemplo[2,])
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[j,] <- T
}
return(df)
}
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- fill(items2, nodata2)
View(nodata2)
nodata2[,1]
nodata2[1,1]
nodata2[1,]
length(items2)
nrow(items2)
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[1:length(item),j] <- T
}
return(df)
}
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- fill(items2, nodata2)
View(nodata2)
for (i in 1:length(items2)){
aux <- unlist(strsplit(items2[i], split = ','))
for (j in aux){
nodata2[i,j] <- T
}
}
View(nodata2)
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
View(nodata2)
for (i in 1:length(items2)){
aux <- unlist(strsplit(items2[i], split = ','))
for (j in aux){
nodata2[i,j] <- T
}
}
View(nodata2)
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- sapply(items2, fill)
nodata2 <- sapply(items2, nodata2)
nodata2 <- sapply(items2, fill(nodata2))
fill <-  function(item) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[1:length(item),j] <- T
}
return(df)
}
nodata2 <- sapply(items2, fill)
fill <-  function(item) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[,j] <- T
}
return(df)
}
nodata2 <- sapply(items2, fill)
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[,j] <- T
}
return(df)
}
df <- sapply(items2, fill(nodata2))
items2
fill <-  function(item, df) {
aux <- unlist(strsplit(item, split = ','))
for (j in aux){
df[,j] <- T
}
return(df)
}
fill <-  function(item) {
aux <- unlist(strsplit(item, split = ','))
n2 <- unique(unlist(strsplit(item, split = ',')))
df <- as.data.frame(matrix(nrow = length(item), ncol = length(n2)))
for (j in aux){
df[,j] <- T
}
return(df)
}
fill <-  function(item) {
aux <- unlist(strsplit(item, split = ','))
n2 <- unique(unlist(strsplit(item, split = ',')))
df <- as.data.frame(matrix(nrow = length(item), ncol = length(n2)))
colnames(df) <- n2
for (j in aux){
df[,j] <- T
}
return(df)
}
df <- sapply(items2, fill)
df
df.total <- as.data.frame(matrix(nrow = length(items2)))
df.total <- sapply(items2, fill)
df.total <- as.data.frame(sapply(items2, fill))
View(df.total)
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
View(nodata2)
aux <- unlist(strsplit(items2[i], split = ','))
for (j in aux){
nodata2[1,j] <- T
}
View(nodata2)
aux <- unlist(strsplit(items2[i], split = ','))
aux
aux <- unlist(strsplit(items2, split = ','))
aux
aux <- unlist(strsplit(items2[1], split = ','))
aux
for (j in aux){
nodata2[1,j] <- T
}
fill <-  function(item) {
for (i in 1:length(item)){
aux <- unlist(strsplit(item[i], split = ','))
for (j in aux){
df[i,j] <- T
}
}
return(df)
}
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- as.data.frame(sapply(items2, fill))
fill <-  function(item, df) {
for (i in 1:length(item)){
aux <- unlist(strsplit(item[i], split = ','))
for (j in aux){
df[i,j] <- T
}
}
return(df)
}
items2 <- as.character(ejemplo$article)
items.names2 <- unique(unlist(strsplit(items2, split = ',')))
nodata2 <- as.data.frame(matrix(nrow = length(items2), ncol = length(items.names2)))
colnames(nodata2) <- items.names2
nodata2 <- as.data.frame(sapply(items2, fill(nodata2)))
periodico <- read.csv("periodico.csv")
ejemplo <- read.csv("ejemplo.csv")
colnames(periodico)[5] <-  "items"
ejemplo$X <- NULL
periodico$X <- NULL
periodico$times <- difftime(periodico$exit, periodico$entry, units =  "secs")
possible.bots = periodico$ID[(periodico$times < 21)]
length(possible.bots)
contenido <- c("deportes","politica","variedades","internacional","nacionales","sucesos","comunidad","negocios","opinion")
unliststr <- function(vec){
it <- unlist(strsplit(vec, ","))
numbers <- unique(na.omit(as.numeric(unlist(strsplit(as.character(it), "[^0-9]+")))))
element <- character()
for (i in 1:length(numbers)){
if(floor(((numbers[i]/9) %% 1)*10)!=0){
group <- as.integer((numbers[i]/9)+1)
article <- floor(((numbers[i]/9) %% 1)*10)
article <- paste(c("articulo",article), collapse = "")
item <- paste(c(contenido[group],article), collapse = "/")
element <- paste(c(element,item), collapse = ",")
}else{
group <- as.integer(numbers[i]/9)
article <- paste(c("articulo",9), collapse = "")
item <- paste(c(contenido[group],article), collapse = "/")
element <- paste(c(element,item), collapse = ",")
}
}
return(element)
}
periodico$article <- sapply(as.character(periodico$items), unliststr)
```
### Actividad 2
```{r}
```
### Actividad 3
Dado un usuario nuevo que haya ingresado a n articulos (n variable), poder recomendar un articulo n+1
y asi aumentar el compromiso del cliente con su portal web. Como usted sabe, para poder calcular las
reglas necesita como entrada MinSupport y MinConfianza. Sin embargo, el cliente desconoce cuÃ¡les
son estos valores en consecuencia es tarea de usted determinar y justificar los mismos de acuerdo a su
criterio.
En esta actividad se procede a transformar la columnas (items, por comodidad en lectura), a caracter para poder nombrar las columnas del nuevo dataframe (creado al estilo disperso para saber que usuario ha visto cual articulo), de esta forma convertirlo en transacciones y aplicar el algoritmo apriori para saber poder realizar las recomendaciones.
```{r}
items <- as.character(periodico$article)
items.names <- unique(unlist(strsplit(items, split = ',')))
nodata <- as.data.frame(matrix(nrow = length(items), ncol = length(items.names)))
colnames(nodata) <- items.names
unlist(strsplit(items[1], split = ','))
unlist(strsplit(items[131300], split = ','))
unlist(strsplit(items[131301], split = ','))
for (i in 1:length(items)){
aux <- unlist(strsplit(items[i], split = ','))
for (j in aux){
nodata[i,j] <- T
}
}
datransactions <- as(nodata, "transactions")
rules <- apriori(datransactions, parameter = list(supp = 0.000616908, conf = 0.98, target = "rules"))
inspect(subset(rules, subset = lhs %ain% c("deportes/articulo1","deportes/articulo2")))
inspect(subset(rules, subset = lhs %ain% c("politica/articulo1")))
inspect(rules)
rules
datransactions
rules <- apriori(datransactions, parameter = list(supp = 0.000616908, conf = 0.98, target = "rules"))
rules <- apriori(datransactions, parameter = list(supp = 0.005, conf = 0.1, target = "rules"))
inspect(subset(rules, subset = lhs %ain% c("deportes/articulo1","deportes/articulo2")))
inspect(subset(rules, subset = lhs %ain% c("politica/articulo1")))
inspect(rules)
rules <- apriori(datransactions, parameter = list(supp = 0.005, conf = 0.9, target = "rules"))
inspect(rules)
setwd("C:/Users/Davee/Desktop/mineria")
shiny::runApp()
library("stringr")
library("reshape2")
library("recommenderlab")
library(shiny)
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
# Creating a DF with user's Info
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
# MovieID::Title::Genres
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
# delete useless id
train$id <- NULL
#create training & testing
training <- train[0,]
testing <- train[0,]
for(j in unique(train$user)){
aux <- train[train$user == j, ]
sampl <-  sample(nrow(aux), floor(nrow(aux) * 0.70))
aux.training <- aux[sampl, ]
aux.testing  <- aux[-sampl, ]
training <- rbind(training, aux.training )
testing <- rbind(testing,aux.testing)
}
dim(training)
dim(testing)
length(unique(training$user))
length(unique(testing$user))
# esta es la matriz dispersa que usaremos
df.train  <- dcast(training, user ~ movie)
df.train <- sapply(data.frame(df.train), as.numeric)
# Convirtiendo en una matriz especial de la biblioteca
train.RatingMatrix <- as(as.matrix(df.train), "realRatingMatrix")
as(train.RatingMatrix, "matrix")
as(train.RatingMatrix, "list")
# Arguments are n and minRating. Items with a rating below minRating will not be part of the top-N list.
# n N (number of recommendations) of the top-N lists generated (only if type="topNList")
# to normalize and method params o the list, check the slack section "fonts"
rec=Recommender(train.RatingMatrix[1:nrow(train.RatingMatrix)],method="UBCF", param=list(normalize = "Z-score",method="Jaccard",nn=5, minRating=1))
print(rec)
names(getModel(rec))
getModel(rec)$nn
recom <- predict(rec, train.RatingMatrix[1:nrow(train.RatingMatrix)], type="ratings")
