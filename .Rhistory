swirl()
library(swirl)
swirl()
num_vect = c(0.5.55,-10,6)
num_vect = c(0.555,-10,6)
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("Mi", "nombre", "es")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Dave")
my_name
paste(my_name, collapse = " ")
paste("Hola", "mundo!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z<- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
7/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(x==5) & c(x==7)]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <-c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?mattrix
?matrix
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames()<- cnames
colnames(cnames)
colnames(my_data) <-
cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
5
!=7
5!=7
!(5==7)
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
which(ints>7)
any(ints)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
boring_function(x)
submit()
swirl()
Sys.Date()
mean(c(2, 4, 5))
x
submit()
library(swirl)
swirl()
paste(my_char, collapse = " ")
exit()
bye
swirl
swirl()
submit()
submit()
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
prob = c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpos
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
unclass(Sys.Date())
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
d1
months(d1)
months(t1)
quarters(t2)
t3 <- 17 de octubre de 1986 08:24"
t3: 17 de octubre de 1986 08:24"
t3 <- c(17 de octubre de 1986 08:24")
t3 <- c("17 de octubre de 1986 08:24")
t3 <- "17 de octubre de 1986 08:24"
?strptime
t4<-strptime(t3, "%d de %B de %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
class(cars)
plot(cars)
?plto
?plot
plot(x =cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main())
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", secondary ="My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
plot(cars, type="l")
mtcars
data(mtcars)
dim(mtcars)
head(mtcars)
?boxplot
boxpl()
boxplot(formula = mpg ~ cyl, data = mtcars)
hits(mtcars$mpg)
hist(mtcars$mpg)
?barplot
barplot(marital)
barplot(mtcars$mpg)
barplot(marital)
barplot(cars)
barplot(martial)
barplot(mtcars)
play()
nxt()
package(swirl)
library(swirl)
swirl()
a
a
a
a
a
a
a123121
bye()
swirl()
submit
submit()
swirl()
library(Getting_and_Cleaning_Data)
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
swirl()
swirl()
swirl()
install_course_github('swirl_courses','Getting_and_Cleaning_Data')
install_course_github('https://github.com/swirldev/swirl_courses','Getting_and_Cleaning_Data')
library('swirl')
install_from_swirl("Getting_and_Cleaning_Data")
install_course_github("swirl_courses", "Getting_and_Cleaning_Data")
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_github("https://github.com/swirldev/swirl_courses.git", "Getting_and_Cleaning_Data")
library('swirl')
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE)
swirl()
swirl()
library(swirl)
install_course_github(davepadrino, Getting_and_Cleaning_Data)
install_course_github("davepadrino", Getting_and_Cleaning_Data)
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_github("davepadrino", "Getting_and_Cleaning_Data")
install_course_zip(/home/dave/Downloads)
install_course_zip("/home/dave/Downloads", "Getting_and_Cleaning_Data")
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
install_course_zip("/home/dave/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Getting_and_Cleaning_Data")
swirl()
exit()
bye()
exit()
swilr()
swirl()
swirl()
library(swirl)
swirl()
s
sd
library("openNLP")
acq <- "Gulf Applied Technologies Inc said it sold its subsidiaries engaged in pipeline and terminal operations for 12.2 mln dlrs. The company said the sale is subject to certain post closing adjustments, which it did not explain. Reuter."
acqTag <- tagPOS(acq)
sapply(strsplit(acqTag,"[[:punct:]]*/VB.?"),function(x) sub("(^.*\\s)(\\w+$)", "\\2", x))
grep("ht(tp(s)*)*", ["HTTPS://", "https://"], ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", ("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "ht), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*", c("HTTPS://", "https://"), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*)*|(tco)*", c("HTTPS://", "https://", "tco.."), ignore.case = TRUE, value = TRUE)
grep("ht(tp(s)*(://)+)+|(tco)*", c("HTTPS://dasdasdasdas", "https://asdasdasd", "tco.."), ignore.case = TRUE, value = TRUE)
install.packages('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('rpart.plot')
library('rpart.plot')
install.packages('caret')
library('caret')
library('caret')
library('rpart')
library('rpart.plot')
install.packages('caret')
library('caret')
library('rpart')
install.packages('ggplot2')
install.packages('pROC')
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
# Install dependencies in Linux
# sudo apt-get install libcurl4-openssl-dev
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("jsonlite")
fetch_data = function(preamble, list){
data = preamble
for(elem in list){
data = paste0(data, paste0(strsplit(elem, " ")[[1]], collapse = "+"), "|", collapse = "")
}
return(substr(data, 0, nchar(data)-1))
}
get_url = function(origins, destinations, key, mode = "driving", language = "es"){
# install(pkg)
# url base for distance matrix api
base = "https://maps.googleapis.com/maps/api/distancematrix/json?"
# This could change, using only some atributes from API
origin = fetch_data("origins=", origins)
destination = fetch_data("destinations=", destinations)
key = fetch_data("key=", key)
mode = fetch_data("mode=", mode)
language = fetch_data("language=", language)
# Getting final format for Google API
api_url = paste(c(base, paste0(c(origin, destination, key, mode, language), collapse = "&")), collapse = "")
return(api_url)
}
get_data = function(api_url){
return(fromJSON(api_url))
}
# To Complete
parse_data = function(json){
}
?confusion.matrix
?confusionMatrix
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("recommenderlab")
library("recommenderlab")
?Recommender
?acast
setwd("~/Desktop/univ/Minería de Datos/Proyecto")
Sys.setlocale(locale="C")
library("stringr")
library("reshape2")
sample_sub <- read.csv("data/sample_submission.csv")
train <- read.csv("data/training_ratings_for_kaggle_comp.csv")
movies <- readLines("data/movies.dat")
usr <- readLines("data/users.dat")
install = function(pkg){
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, repos = "http:/cran.rstudio.com")
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
install("recommenderlab")
usr2 <- unlist(strsplit(usr,"::"))
id <- usr2[seq(from = 1, to = length(usr2), by =5 )]
df.user <- as.data.frame(id)
df.user$sexo <- usr2[seq(from = 2, to = length(usr2), by =5 )]
df.user$age <- usr2[seq(from = 3, to = length(usr2), by =5 )]
df.user$ocupacion <- usr2[seq(from = 4, to = length(usr2), by =5 )]
df.user$zip.code <- usr2[seq(from = 5, to = length(usr2), by =5 )]
mov <- unlist(strsplit(movies,"::"))
id <- mov[seq(from = 1, to = length(mov), by =3 )]
df.movie <- as.data.frame(id)
df.movie$title <- mov[seq(from = 2, to = length(mov), by =3 )]
train$id <- NULL
df.train  <- dcast(train, user ~ movie)
?dcast
